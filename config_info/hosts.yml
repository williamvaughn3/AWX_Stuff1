# ansible-inventory 2.9.0
#   config file = /etc/ansible/ansible.cfg
#   configured module search path = ['/home/cw3vaughn/.ansible/plugins/modules', '/usr/share/ansible/plugins/modules']
#   ansible python module location = /home/cw3vaughn/virtpy/lib/python3.8/site-packages/ansible
#   executable location = /home/cw3vaughn/virtpy/bin/ansible-inventory
#   python version = 3.8.10 (default, Mar 15 2022, 12:22:08) [GCC 9.4.0]
# Using /etc/ansible/ansible.cfg as config file
# setting up inventory plugins
# host_list declined parsing /home/cw3vaughn/Templates/170a_DCO_ANSIBLE/Projects_AWX/1_template_default/nix/hosts-same-pass.ini as it did not pass its verify_file() method
# script declined parsing /home/cw3vaughn/Templates/170a_DCO_ANSIBLE/Projects_AWX/1_template_default/nix/hosts-same-pass.ini as it did not pass its verify_file() method
# auto declined parsing /home/cw3vaughn/Templates/170a_DCO_ANSIBLE/Projects_AWX/1_template_default/nix/hosts-same-pass.ini as it did not pass its verify_file() method
# yaml declined parsing /home/cw3vaughn/Templates/170a_DCO_ANSIBLE/Projects_AWX/1_template_default/nix/hosts-same-pass.ini as it did not pass its verify_file() method
# Parsed /home/cw3vaughn/Templates/170a_DCO_ANSIBLE/Projects_AWX/1_template_default/nix/hosts-same-pass.ini inventory source with ini plugin


all:
  children:
    nix:
      children:
        ubuntu:
          hosts:
          children:
            ubuntu_sec_onion:
              hosts:
                192.168.101.14: {}
                192.168.168.99: {}
            ubuntu_esm:
              hosts:
                192.168.101.23: {}
                192.168.168.5: {}
            ubuntu_endgame:
              hosts:
                192.168.101.1: {}
                192.168.168.99: {}

        debian:
          hosts:
            192.168.1.11: {}
            192.168.1.5: {}
            192.168.1.4: {}
            192.168.1.1: {}
            192.168.1.13: {}
            192.168.1.2: {}
            192.168.1.14: {}
            192.168.1.99: {}
            192.168.1.3: {}
            192.168.1.12: {}
          children:
            debian_acas:
              192.168.1.99: {}
            debian_dovecot:
              192.168.1.12: {}  
        kali_ops:
          hosts:
            192.168.99.7: {}
            192.168.99.8: {}
            192.168.99.20: {}
            192.168.99.6: {}
            192.168.99.10: {}
            192.168.99.29: {}
            192.168.99.28: {}
            192.168.99.30: {}
            192.168.99.9: {}
            192.168.99.18: {}
            192.168.99.37: {}
            192.168.99.27: {}
            192.168.99.16: {}
            192.168.99.19: {}
            192.168.99.26: {}
            192.168.99.17: {}
            192.168.99.36: {}

    ungrouped: {}

#windows-server-5-lan-dev 
# lan-tools=192.168.101.99 , ubuntu_20.04 , cy.medium 
# lan-tools=192.168.101.4  , ubuntu_20.04 , cy.medium 
# lan-tools=192.168.101.1  , ubuntu_20.04 , cy.medium 
# lan-tools=192.168.101.23 , ubuntu_20.04 , cy.medium 
# lan-tools=192.168.101.21 , ubuntu_20.04 , cy.medium 
# lan-tools=192.168.101.11 , ubuntu_20.04 , cy.medium 
# lan-tools=192.168.101.15 , ubuntu_20.04 , cy.medium 
# lan-tools=192.168.101.13 , ubuntu_20.04 , cy.medium 
# lan-tools=192.168.101.5  , ubuntu_20.04 , cy.medium 
# lan-dev=192.168.168.5    , ubuntu_20.04 , cy.medium 
# lan-dev=192.168.168.2    , ubuntu_20.04 , cy.medium 
# lan-dev=192.168.168.4    , ubuntu_20.04 , cy.medium 
# lan-tools=192.168.101.12 , ubuntu_20.04 , cy.medium 
# lan-dev=192.168.168.3    , ubuntu_20.04 , cy.medium 
# lan-tools=192.168.101.14 , ubuntu_20.04 , cy.medium 
# lan-tools=192.168.101.2  , ubuntu_20.04 , cy.medium 
# lan-tools=192.168.101.3  , ubuntu_20.04 , cy.medium 
# lan-dev=192.168.168.99   , ubuntu_20.04 , cy.medium 
# lan-dev=192.168.168.1    , ubuntu_20.04 , cy.medium 
# lan-tools=192.168.101.22 , ubuntu_20.04 , cy.medium 
# lan-tools=192.168.101.24 , ubuntu_20.04 , cy.medium   

######
# Only needed for the Configuration, once built the database can be backed up
# Use a ansible-inventory -i nix_hosts --list > nix_all_out.json command or something...
# 1. From the awx acn, do a sudo docker exec -it {container} bash
# 2. Create the hosts file in the /tmp/hosts_nix(for this example)
# 3. Ensure via the web console you have the correct inventory created and use the below command 
# 4. awx-manage inventory_import --inventory-name debian_ent_lan_clients hosts --source /tmp/hosts_1
####